# routes.py (in micro_calculator directory)
from fastapi import APIRouter, Request, Form, HTTPException
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from micro_calculator.crop_advisor import CropAdvisor

router = APIRouter()

# Templates
templates = Jinja2Templates(directory="templates")

advisor = CropAdvisor()

# Translations
translations = {
    "en": {
        "title": "ЁЯМ▒ Crop Drop",
        "subtitle": "Get AI-powered irrigation and fertilizer recommendations",
        "crop_label": "Select Crop:",
        "stage_label": "Growth Stage:",
        "state_label": "State:",
        "location_label": "Location Coordinates:",
        "latitude_placeholder": "Latitude",
        "longitude_placeholder": "Longitude",
        "calculate_btn": "Get Recommendation",
        "loading_text": "ЁЯФД Calculating... Getting NASA data...",
        "irrigation_title": "ЁЯТз Irrigation Advice",
        "fertilizer_title": "ЁЯМ╛ Fertilizer Advice",
        "et0_label": "Reference ETтВА:",
        "kc_label": "Crop Coefficient (Kc):",
        "etc_label": "Crop ETc:",
        "rainfall_label": "Rainfall:",
        "irrigation_need_label": "Irrigation Needed:",
        "skip_irrigation": "тЖТ Skip irrigation this week",
        "apply_irrigation": "тЖТ Apply {} mm water this week",
        "soil_values_label": "Soil Nutrients:",
        "urea_label": "Urea:",
        "dap_label": "DAP:",
        "mop_label": "MOP:",
        "kg_ha": "kg/ha",
        "based_on_location": "Based on your location's soil conditions",
        "split_basal": "Basal (Sowing): 40%",
        "split_vegetative": "Vegetative: 30%",
        "split_reproductive": "Reproductive: 30%"
    },
    "hi": {
        "title": "ЁЯМ▒ рд╕реНрдорд╛рд░реНрдЯ рдлрд╕рд▓ рд╕рд▓рд╛рд╣рдХрд╛рд░",
        "subtitle": "AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕рд┐рдВрдЪрд╛рдИ рдФрд░ рдЙрд░реНрд╡рд░рдХ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "crop_label": "рдлрд╕рд▓ рдЪреБрдиреЗрдВ:",
        "stage_label": "рд╡рд┐рдХрд╛рд╕ рдЕрд╡рд╕реНрдерд╛:",
        "state_label": "рд░рд╛рдЬреНрдп:",
        "location_label": "рд╕реНрдерд╛рди рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ:",
        "latitude_placeholder": "рдЕрдХреНрд╖рд╛рдВрд╢",
        "longitude_placeholder": "рджреЗрд╢рд╛рдВрддрд░",
        "calculate_btn": "рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "loading_text": "ЁЯФД рдЧрдгрдирд╛ рдЪрд▓ рд░рд╣реА рд╣реИ... NASA рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
        "irrigation_title": "ЁЯТз рд╕рд┐рдВрдЪрд╛рдИ рд╕рд▓рд╛рд╣",
        "fertilizer_title": "ЁЯМ╛ рдЙрд░реНрд╡рд░рдХ рд╕рд▓рд╛рд╣",
        "et0_label": "рд╕рдВрджрд░реНрдн ETтВА:",
        "kc_label": "рдлрд╕рд▓ рдЧреБрдгрд╛рдВрдХ (Kc):",
        "etc_label": "рдлрд╕рд▓ ETc:",
        "rainfall_label": "рд╡рд░реНрд╖рд╛:",
        "irrigation_need_label": "рд╕рд┐рдВрдЪрд╛рдИ рдЖрд╡рд╢реНрдпрдХ:",
        "skip_irrigation": "тЖТ рдЗрд╕ рд╕рдкреНрддрд╛рд╣ рд╕рд┐рдВрдЪрд╛рдИ рдЫреЛрдбрд╝реЗрдВ",
        "apply_irrigation": "тЖТ рдЗрд╕ рд╕рдкреНрддрд╛рд╣ {} mm рдкрд╛рдиреА рд▓рдЧрд╛рдПрдВ",
        "soil_values_label": "рдорд┐рдЯреНрдЯреА рдкреЛрд╖рдХ рддрддреНрд╡:",
        "urea_label": "рдпреВрд░рд┐рдпрд╛:",
        "dap_label": "рдбреАрдПрдкреА:",
        "mop_label": "рдПрдордУрдкреА:",
        "kg_ha": "kg/ha",
        "based_on_location": "рдЖрдкрдХреЗ location рдХреА рдорд┐рдЯреНрдЯреА рдХреА рд╕реНрдерд┐рддрд┐ рдХреЗ рдЖрдзрд╛рд░ рдкрд░",
        "split_basal": "рдмреЗрд╕рд▓ (рдмреБрдЖрдИ): 40%",
        "split_vegetative": "рд╡рд╛рдирд╕реНрдкрддрд┐рдХ: 30%",
        "split_reproductive": "рдкреНрд░рдЬрдирди: 30%"
    }
}

# Pydantic Model
class AdviceRequest(BaseModel):
    crop_type: str
    growth_stage: str
    state: str
    lang: str = "en"

# Routes
@router.get("/", response_class=HTMLResponse)
async def home(request: Request, lang: str = "en"):
    lang = lang if lang in translations else "en"
    return templates.TemplateResponse(
        "index.html",
        {
            "request": request,
            "lang": lang,
            "t": translations[lang],
            "translations": translations
        }
    )

@router.post("/get_advice")
async def get_advice(req: AdviceRequest):
    try:
        advice = advisor.generate_advice(
            req.crop_type.lower(),
            req.growth_stage.lower(),
            req.state.lower()
        )
        return JSONResponse({"success": True, "advice": advice, "lang": req.lang})
    except Exception as e:
        return JSONResponse({"success": False, "error": str(e)})